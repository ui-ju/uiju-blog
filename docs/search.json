[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "uiju-blog",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 6, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMar 3, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\nimport numpy as np\n\na = np.arange(10)\na\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n\npenguins.info()\n\n# 1\npenguins.isna()\npenguins[\"bill_length_mm\"].loc[penguins[\"bill_length_mm\"].isna()].iloc[0] = 0\npenguins[\"bill_depth_mm\"].loc[penguins[\"bill_depth_mm\"].isna()].iloc[0] = 0\npenguins[\"flipper_length_mm\"].loc[penguins[\"flipper_length_mm\"].isna()].iloc[0] = 0\npenguins[\"body_mass_g\"].loc[penguins[\"body_mass_g\"].isna()].iloc[0] = 0\npenguins[\"sex\"].loc[penguins[\"sex\"].isna()].iloc[0] = \"X\"\n\n# 2, 3\npenguins.describe()\nad = penguins.loc[penguins[\"species\"] == \"Adelie\"]\ngt = penguins.loc[penguins[\"species\"] == \"Gentoo\"]\ncs = penguins.loc[penguins[\"species\"] == \"Chinstrap\"]\nad.describe()\ngt.describe()\ncs.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_44132\\1805138.py:8: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n  penguins[\"bill_length_mm\"].loc[penguins[\"bill_length_mm\"].isna()].iloc[0] = 0\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_44132\\1805138.py:9: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n  penguins[\"bill_depth_mm\"].loc[penguins[\"bill_depth_mm\"].isna()].iloc[0] = 0\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_44132\\1805138.py:10: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n  penguins[\"flipper_length_mm\"].loc[penguins[\"flipper_length_mm\"].isna()].iloc[0] = 0\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_44132\\1805138.py:11: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n  penguins[\"body_mass_g\"].loc[penguins[\"body_mass_g\"].isna()].iloc[0] = 0\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_44132\\1805138.py:12: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n  penguins[\"sex\"].loc[penguins[\"sex\"].isna()].iloc[0] = \"X\"\n\n\n\n\n\n\n\n\n\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\ncount\n68.000000\n68.000000\n68.000000\n68.000000\n68.000000\n\n\nmean\n48.833824\n18.420588\n195.823529\n3733.088235\n2007.970588\n\n\nstd\n3.339256\n1.135395\n7.131894\n384.335081\n0.863360\n\n\nmin\n40.900000\n16.400000\n178.000000\n2700.000000\n2007.000000\n\n\n25%\n46.350000\n17.500000\n191.000000\n3487.500000\n2007.000000\n\n\n50%\n49.550000\n18.450000\n196.000000\n3700.000000\n2008.000000\n\n\n75%\n51.075000\n19.400000\n201.000000\n3950.000000\n2009.000000\n\n\nmax\n58.000000\n20.800000\n212.000000\n4800.000000\n2009.000000"
  }
]