{
  "hash": "cfb77059d58e64370d86691bf73496d5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Post With Code\"\nauthor: \"Harlow Malloc\"\ndate: \"2025-03-06\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\nThis is a post with executable code.\n\n::: {#6c3ede85 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\na = np.arange(10)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n:::\n:::\n\n\n::: {#4921be8b .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\npenguins.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB\n```\n:::\n:::\n\n\n##### 1. NaN 값 확인 및 제거\n\n::: {#0b5864ff .cell execution_count=3}\n``` {.python .cell-code}\npenguins.isna().sum() # NaN 값이 어디에 있는지 확인\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\nspecies               0\nisland                0\nbill_length_mm        2\nbill_depth_mm         2\nflipper_length_mm     2\nbody_mass_g           2\nsex                  11\nyear                  0\ndtype: int64\n```\n:::\n:::\n\n\n각 항목별 NaN값이 있는 것을 확인하였습니다.\n원할한 분석을 위해 NaN을 0과 X로 수정하였습니다\n\n::: {#574b5734 .cell execution_count=4}\n``` {.python .cell-code}\npenguins.loc[penguins[\"bill_length_mm\"].isna(), \"bill_length_mm\"] = 0\npenguins.loc[penguins[\"bill_depth_mm\"].isna(), \"bill_depth_mm\"] = 0\npenguins.loc[penguins[\"flipper_length_mm\"].isna(), \"flipper_length_mm\"] = 0\npenguins.loc[penguins[\"body_mass_g\"].isna(), \"body_mass_g\"] = 0\npenguins.loc[penguins[\"sex\"].isna(), \"sex\"] = \"X\"\n```\n:::\n\n\n::: {#8bda8c17 .cell execution_count=5}\n``` {.python .cell-code}\npenguins.isna().sum() # NaN 값 수정 확인\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\nspecies              0\nisland               0\nbill_length_mm       0\nbill_depth_mm        0\nflipper_length_mm    0\nbody_mass_g          0\nsex                  0\nyear                 0\ndtype: int64\n```\n:::\n:::\n\n\n# 1. 각 종별 펭귄수 구하기\n\n::: {#47a6958b .cell execution_count=6}\n``` {.python .cell-code}\nspecies_counts = {}\n\nfor species in penguins[\"species\"].unique(): \n    species_counts[species] = penguins.loc[penguins[\"species\"] == species, \"species\"].shape[0]\n```\n:::\n\n\n### 결과 값\n\n::: {#4e3cec03 .cell execution_count=7}\n``` {.python .cell-code}\nspecies_df = pd.DataFrame(list(species_counts.items()), columns=[\"species\", \"count\"])\nprint(species_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     species  count\n0     Adelie    152\n1     Gentoo    124\n2  Chinstrap     68\n```\n:::\n:::\n\n\n### 해당 결과를 통해 Adelie(152), Gentoo(124), Chinstrap(68) 순으로 펭귄이 많은 것을 알 수 있습니다.\n\n\n# 2-1. 각 섬별 펭귄수 구하기\n\n::: {#fa6349c6 .cell execution_count=8}\n``` {.python .cell-code}\nisland_list = [\"Biscoe\", \"Dream\", \"Torgersen\"]\nisland_counts = {}\n\nfor island in island_list:\n    island_counts[island] = penguins.loc[penguins[\"island\"] == island, \"island\"].shape[0]\n```\n:::\n\n\n### 결과 값\n\n::: {#f1a9784d .cell execution_count=9}\n``` {.python .cell-code}\nprint(island_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Biscoe': 168, 'Dream': 124, 'Torgersen': 52}\n```\n:::\n:::\n\n\n### 해당 결과를 통해 Biscoe(168), Dream(124), Torgersen(52) 순으로 펭귄이 많은 것을 알 수 있습니다.\n\n# 2-2. 각 섬별 펭귄 종류 구하기\n\n::: {#2c0e90af .cell execution_count=10}\n``` {.python .cell-code}\nisland_species_counts = {}\n\nfor island in penguins[\"island\"].unique():  \n    island_species_counts[island] = {}\n\n    # 각 종별 반복\n    for species in penguins[\"species\"].unique():  \n        count = penguins.loc[(penguins[\"island\"] == island) & (penguins[\"species\"] == species), \"species\"].shape[0]\n        island_species_counts[island][species] = count\n```\n:::\n\n\n::: {#3c6f890d .cell execution_count=11}\n``` {.python .cell-code}\nprint(island_species_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Torgersen': {'Adelie': 52, 'Gentoo': 0, 'Chinstrap': 0}, 'Biscoe': {'Adelie': 44, 'Gentoo': 124, 'Chinstrap': 0}, 'Dream': {'Adelie': 56, 'Gentoo': 0, 'Chinstrap': 68}}\n```\n:::\n:::\n\n\n### Adelie는 모든 지역(Torgersen(52), Biscoe(44), Dream(52))에 서식하고 있어 서식지가 분포되어 있는 것을 알 수 있습니다.\n\n### Gentoo와 Chinstrap은 각 Biscoe와 Dream에만 서식하는 것을 알 수 있습니다.\n\n::: {#7b4d8092 .cell execution_count=12}\n``` {.python .cell-code}\nbill_length_max = penguins[\"bill_length_mm\"].max()\nbill_length_min = penguins.loc[penguins[\"bill_length_mm\"] > 0, \"bill_length_mm\"].min()\nbill_length_mean = penguins[\"bill_length_mm\"].mean() \n```\n:::\n\n\n### 결과 값\n\n::: {#630dfbe3 .cell execution_count=13}\n``` {.python .cell-code}\nprint(bill_length_max, bill_length_min, bill_length_mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n59.6 32.1 43.66656976744186\n```\n:::\n:::\n\n\n### 해당 결과를 통해 전체 펭귄 부리의 최대값(59.6), 최소값(32.1), 평균값(43.6)을 알 수 있습니다.\n\n# 3-2. 펭귄별 부리 길이 구하기\n\n::: {#9c862b53 .cell execution_count=14}\n``` {.python .cell-code}\nspecies_bill_length = {}\n\nfor species in penguins[\"species\"].unique(): \n    species_bill_length[species] = {\n        \"max\": penguins.loc[penguins[\"species\"] == species, \"bill_length_mm\"].max(),\n        \"min\": penguins.loc[(penguins[\"species\"] == species) & (penguins[\"bill_length_mm\"] > 0), \"bill_length_mm\"].min(),\n        \"mean\": penguins.loc[penguins[\"species\"] == species, \"bill_length_mm\"].mean()\n    }\n\n```\n:::\n\n\n::: {#7e758f2a .cell execution_count=15}\n``` {.python .cell-code}\nprint(species_bill_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Adelie': {'max': 46.0, 'min': 32.1, 'mean': np.float64(38.536184210526315)}, 'Gentoo': {'max': 59.6, 'min': 40.9, 'mean': np.float64(47.12177419354838)}, 'Chinstrap': {'max': 58.0, 'min': 40.9, 'mean': np.float64(48.83382352941177)}}\n```\n:::\n:::\n\n\n### 각 종의 부리 길이 평균값을 기준으로 부리가 가장 긴 종을 다음과 같이 구했습니다.\n### Chinstrap(48.8) > Gentoo(47.1) > Adelie(38.5)\n\n# 4-1. 몸무게 구하기\n\n::: {#d1831860 .cell execution_count=16}\n``` {.python .cell-code}\nbody_mass_max = penguins[\"body_mass_g\"].max()\nbody_mass_min = penguins.loc[penguins[\"body_mass_g\"] > 0, \"body_mass_g\"].min()\nbody_mass_mean = penguins[\"body_mass_g\"].mean()\n```\n:::\n\n\n### 결과 값\n\n::: {#1be6662f .cell execution_count=17}\n``` {.python .cell-code}\nprint(body_mass_max, body_mass_min, body_mass_mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6300.0 2700.0 4177.325581395349\n```\n:::\n:::\n\n\n### 해당 결과를 통해 전체 펭귄 몸무게게 최대값(6300), 최소값(2700), 평균값(4177)을 알 수 있습니다.\n\n# 3-2. 펭귄별 몸무게 구하기\n\n::: {#d202da16 .cell execution_count=18}\n``` {.python .cell-code}\nspecies_bill_length = {}\n\nspecies_body_mass = {}\n\nfor species in penguins[\"species\"].unique():  # 각 종별 반복\n    species_body_mass[species] = {\n        \"max\": penguins.loc[penguins[\"species\"] == species, \"body_mass_g\"].max(),\n        \"min\": penguins.loc[(penguins[\"species\"] == species) & (penguins[\"body_mass_g\"] > 0), \"body_mass_g\"].min(),\n        \"mean\": penguins.loc[penguins[\"species\"] == species, \"body_mass_g\"].mean()\n    }\n\n```\n:::\n\n\n::: {#e8c6e3b9 .cell execution_count=19}\n``` {.python .cell-code}\nprint(species_body_mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'Adelie': {'max': 4775.0, 'min': 2850.0, 'mean': np.float64(3676.315789473684)}, 'Gentoo': {'max': 6300.0, 'min': 3950.0, 'mean': np.float64(5035.080645161291)}, 'Chinstrap': {'max': 4800.0, 'min': 2700.0, 'mean': np.float64(3733.0882352941176)}}\n```\n:::\n:::\n\n\n### 각 종의 몸무게 평균값을 기준으로 무게가 가장 무거운 종을 다음과 같이 구했습니다.\n### Gentoo(5076) > Chinstrap(3733) > Adelie(3700)\n\n\n\n# 총정리\nAdelie: 부리 길이 짧음, 부리 깊이 보통, 날개 길이 짧음, 몸무게 가벼움\nChinstrap: 부리 길이 가장 김, 부리 깊이 보통, 날개 길이 중간, 몸무게 중간\nGentoo: 부리 길이 김, 부리 깊이 가장 얇음, 날개 길이 가장 긺, 몸무게 가장 무거움\n\n##### 이번 분석은 가중치 없이 단순히 각 항목의 평균값을 비교하여 판단했습니다.\n##### 추후 전체 값과 종별 특성을 비교하는 값을 작성할 예정입니다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}